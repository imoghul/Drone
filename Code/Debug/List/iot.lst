###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          18/Aug/2022  11:38:38
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\iot.c
#    Command line  =  
#        -f C:\Users\IBRAHI~1\AppData\Local\Temp\EW2D58.tmp ("C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\iot.c" -lC
#        "C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\List" -o
#        "C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\List\iot.lst
#    Object file   =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\Obj\iot.r43
#
###############################################################################

C:\Users\Ibrahim Moghul\OneDrive\Documents\Programming\Drone\Code\iot.c
      1          #include "iot.h"
      2          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x51a
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2
      3          #include "utils.h"
      4          #include <string.h>
      5          #include "wheels.h"
      6          #include "utils.h"
      7          #include "serial.h"
      8          #include "ports.h"
      9          #include "sm.h"
     10          

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     11          char iot_setup_state = BOOT_UP;
   \                     iot_setup_state:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for iot_setup_state>`
     12          extern volatile char USB0_Char_Tx[];
     13          extern unsigned volatile int pb0_buffered;
     14          extern volatile char USB0_Char_Rx_Process[];
     15          extern volatile char receievedFromPC;

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          char SSID[SSID_LEN + 1];
   \                     SSID:
   \   000000                DS8 11

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          char IP[IP_LEN + 1];
   \                     IP:
   \   000000                DS8 14
     18          extern volatile unsigned char display_changed;
     19          extern char display_line[4][11];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          char dotFound;
   \                     dotFound:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          int midIndex;
   \                     midIndex:
   \   000000                DS8 2
     22          extern volatile int stateCounter;
     23          extern volatile char pingFlag;
     24          
     25          

   \                                 In  segment CODE, align 2
     26          int Init_IOT(void) {
   \                     Init_IOT:
     27              int isTransmitting = UCA0IE & UCTXIE;
   \   000000   1E421A05     MOV.W   &0x51a, R14
   \   000004   6EF3         AND.B   #0x2, R14
     28          
     29              switch(iot_setup_state) {
   \   000006   5F42....     MOV.B   &iot_setup_state, R15
   \   00000A   7F804200     SUB.B   #0x42, R15
   \   00000E   1524         JEQ     ??Init_IOT_5
   \   000010   7F800700     SUB.B   #0x7, R15
   \   000014   4024         JEQ     ??Init_IOT_6
   \   000016   6F82         SUB.B   #0x4, R15
   \   000018   1424         JEQ     ??Init_IOT_7
   \   00001A   5F83         SUB.B   #0x1, R15
   \   00001C   3224         JEQ     ??Init_IOT_8
   \   00001E   7F800500     SUB.B   #0x5, R15
   \   000022   2124         JEQ     ??Init_IOT_9
   \   000024   7F801600     SUB.B   #0x16, R15
   \   000028   3B24         JEQ     ??Init_IOT_10
   \   00002A   6F82         SUB.B   #0x4, R15
   \   00002C   1124         JEQ     ??Init_IOT_11
   \   00002E   5F83         SUB.B   #0x1, R15
   \   000030   2D24         JEQ     ??Init_IOT_12
   \   000032   7F800500     SUB.B   #0x5, R15
   \   000036   1C24         JEQ     ??Init_IOT_13
   \   000038   3A3C         JMP     ??Init_IOT_3
     30                  case (BOOT_UP):
     31                      waitForReady();
   \                     ??Init_IOT_5:
   \   00003A   ........     CALLA   #waitForReady
     32                      break;
     33          
     34                  case CIPMUX_Tx:
     35                      SendIOTCommand(ALLOW_MULTIPLE_CONNECTIONS, CIPMUX_Rx);
     36                      break;
     37          
     38                  case CIPMUX_Rx:
     39                      if(isTransmitting) break; // wait for the Tx to completely transmit
     40          
     41                      if(pb0_buffered) { // wait for pb to finish buffering
     42                          iot_setup_state = CIPSERVER_Tx;
     43                          clearProcessBuff_0();
     44                      }
     45          
     46                      break;
     47          
     48                  case CIPSERVER_Tx:
     49                      SendIOTCommand(START_SERVER, CIPSERVER_Rx);
     50                      break;
     51          
     52                  case CIPSERVER_Rx:
     53                      if(isTransmitting) break;
     54          
     55                      if(pb0_buffered) {
     56                          iot_setup_state = GET_SSID_Tx;
     57                          clearProcessBuff_0();
     58                      }
     59          
     60                      break;
     61          
     62                  case GET_SSID_Tx:
     63                      SendIOTCommand(SSID_COMMAND, GET_SSID_Rx);
     64                      break;
     65          
     66                  case GET_SSID_Rx:
     67                      if(isTransmitting) break;
     68          
     69                      getSSID();
     70          
     71                      break;
     72          
     73                  case GET_IP_Tx:
     74                      SendIOTCommand(IP_COMMAND, GET_IP_Rx);
     75                      break;
     76          
     77                  case GET_IP_Rx:
     78                      if(isTransmitting) break;
     79          
     80                      getIP();
     81                      displayNetworkInfo();
     82          
     83                      break;
     84          
     85                  default:
     86                      if(pingFlag) {
     87                          pingFlag = 0;
     88                          SendIOTCommand(PING_COMMAND, IOT_SETUP_FINISHED);
     89                      }
     90          
     91                      return 1;
     92                      break;
     93              }
     94          
     95              return 0;
   \                     ??Init_IOT_0:
   \   00003E   0C43         MOV.W   #0x0, R12
   \   000040   1001         RETA
   \                     ??Init_IOT_7:
   \   000042   7D406D00     MOV.B   #0x6d, R13
   \   000046   3C40....     MOV.W   #`?<Constant "AT+CIPMUX=1\\r\\n">`, R12
   \                     ??Init_IOT_2:
   \   00004A   ........     CALLA   #SendIOTCommand
   \   00004E   F73F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_11:
   \   000050   4E93         CMP.B   #0x0, R14
   \   000052   F523         JNE     ??Init_IOT_0
   \   000054   8293....     CMP.W   #0x0, &pb0_buffered
   \   000058   F227         JEQ     ??Init_IOT_0
   \   00005A   F2405300.... MOV.B   #0x53, &iot_setup_state
   \                     ??Init_IOT_4:
   \   000060   ........     CALLA   #clearProcessBuff_0
   \   000064   EC3F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_9:
   \   000066   7D407300     MOV.B   #0x73, R13
   \   00006A   3C40....     MOV.W   #`?<Constant "AT+CIPSERVER=1,4764\\r\\n">`, R12
   \   00006E   ED3F         JMP     ??Init_IOT_2
   \                     ??Init_IOT_13:
   \   000070   4E93         CMP.B   #0x0, R14
   \   000072   E523         JNE     ??Init_IOT_0
   \   000074   8293....     CMP.W   #0x0, &pb0_buffered
   \   000078   E227         JEQ     ??Init_IOT_0
   \   00007A   F2404E00.... MOV.B   #0x4e, &iot_setup_state
   \   000080   EF3F         JMP     ??Init_IOT_4
   \                     ??Init_IOT_8:
   \   000082   7D406E00     MOV.B   #0x6e, R13
   \   000086   3C40....     MOV.W   #`?<Constant "AT+CWJAP?\\r\\n">`, R12
   \   00008A   DF3F         JMP     ??Init_IOT_2
   \                     ??Init_IOT_12:
   \   00008C   4E93         CMP.B   #0x0, R14
   \   00008E   D723         JNE     ??Init_IOT_0
   \   000090   ........     CALLA   #getSSID
   \   000094   D43F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_6:
   \   000096   7D406900     MOV.B   #0x69, R13
   \   00009A   3C40....     MOV.W   #`?<Constant "AT+CIFSR\\r\\n">`, R12
   \   00009E   D53F         JMP     ??Init_IOT_2
   \                     ??Init_IOT_10:
   \   0000A0   4E93         CMP.B   #0x0, R14
   \   0000A2   CD23         JNE     ??Init_IOT_0
   \   0000A4   ........     CALLA   #getIP
   \   0000A8   ........     CALLA   #displayNetworkInfo
   \   0000AC   C83F         JMP     ??Init_IOT_0
   \                     ??Init_IOT_3:
   \   0000AE   C293....     CMP.B   #0x0, &pingFlag
   \   0000B2   0824         JEQ     ??Init_IOT_14
   \   0000B4   C243....     MOV.B   #0x0, &pingFlag
   \   0000B8   7D404600     MOV.B   #0x46, R13
   \   0000BC   3C40....     MOV.W   #`?<Constant "AT+PING=\\"www.google.c...">`, R12
   \   0000C0   ........     CALLA   #SendIOTCommand
   \                     ??Init_IOT_14:
   \   0000C4   1C43         MOV.W   #0x1, R12
   \   0000C6   1001         RETA
   \   0000C8                REQUIRE _A_UCA0IE_L
     96          }
     97          
     98          

   \                                 In  segment CODE, align 2
     99          void waitForReady(void) {
   \                     waitForReady:
    100              if(pb0_buffered) {
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   0D24         JEQ     ??waitForReady_0
    101                  if(strcmp((char*)USB0_Char_Rx_Process, BOOT_RESPONSE) == 0) iot_setup_state = CIPMUX_Tx;
   \   000006   3D40....     MOV.W   #`?<Constant "WIFI GOT IP\\r\\n">`, R13
   \   00000A   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   00000E   ........     CALLA   #strcmp
   \   000012   0C93         CMP.W   #0x0, R12
   \   000014   0320         JNE     ??waitForReady_1
   \   000016   F2404D00.... MOV.B   #0x4d, &iot_setup_state
    102          
    103                  clearProcessBuff_0();
   \                     ??waitForReady_1:
   \   00001C   ........     CALLA   #clearProcessBuff_0
    104              }
    105          }
   \                     ??waitForReady_0:
   \   000020   1001         RETA
    106          

   \                                 In  segment CODE, align 2
    107          void SendIOTCommand(char* command, char nextState) {
   \                     SendIOTCommand:
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4D         MOV.B   R13, R10
    108              strcpy((char*)USB0_Char_Tx, command);
   \   000004   0D4C         MOV.W   R12, R13
   \   000006   3C40....     MOV.W   #USB0_Char_Tx, R12
   \   00000A   ........     CALLA   #strcpy
    109              USCI_A0_transmit();
   \   00000E   ........     CALLA   #USCI_A0_transmit
    110              iot_setup_state = nextState;
   \   000012   C24A....     MOV.B   R10, &iot_setup_state
    111          }
   \   000016   3A41         POP.W   R10
   \   000018   1001         RETA
    112          

   \                                 In  segment CODE, align 2
    113          void getSSID(void) {
   \                     getSSID:
    114              if(pb0_buffered) {
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   1F24         JEQ     ??getSSID_2
    115                  if(subStringPos((char*)USB0_Char_Rx_Process, SSID_RESPONSE)) {
   \   000006   3D40....     MOV.W   #`?<Constant "+CWJAP:">`, R13
   \   00000A   ........     CALLA   #?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000E   0C93         CMP.W   #0x0, R12
   \   000010   1324         JEQ     ??getSSID_3
    116                      int i;
    117          
    118                      for(i = 0; i <= SSID_LEN && USB0_Char_Rx_Process[i + SSID_RESPONSE_LEN + 1] != '\"'; ++i) SSID[i] = USB0_Char_Rx_Process[i + SSID_RESPONSE_LEN + 1];
   \   000012   0F43         MOV.W   #0x0, R15
   \                     ??getSSID_0:
   \   000014   FF902200.... CMP.B   #0x22, LWRD(USB0_Char_Rx_Process + 8)(R15)
   \   00001A   0724         JEQ     ??getSSID_4
   \   00001C   DF4F........ MOV.B   LWRD(USB0_Char_Rx_Process + 8)(R15), SSID(R15)
   \   000022   1F53         ADD.W   #0x1, R15
   \   000024   3F900B00     CMP.W   #0xb, R15
   \   000028   F53B         JL      ??getSSID_0
    119          
    120                      SSID[i + SSID_RESPONSE_LEN + 2] = 0; // set the end of the SSID to null
   \                     ??getSSID_4:
   \   00002A   CF43....     MOV.B   #0x0, SSID + 9(R15)
    121                      SSID[SSID_LEN] = 0; //  set end of the array to null
   \   00002E   C243....     MOV.B   #0x0, &SSID + 10
    122          
    123                      iot_setup_state = GET_IP_Tx;
   \   000032   7E404900     MOV.B   #0x49, R14
   \   000036   023C         JMP     ??getSSID_1
    124                  } else iot_setup_state = GET_SSID_Tx;
   \                     ??getSSID_3:
   \   000038   7E404E00     MOV.B   #0x4e, R14
   \                     ??getSSID_1:
   \   00003C   C24E....     MOV.B   R14, &iot_setup_state
    125          
    126                  clearProcessBuff_0();
   \   000040   ........     CALLA   #clearProcessBuff_0
    127              }
    128          }
   \                     ??getSSID_2:
   \   000044   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine0:
   \   000000   3C40....     MOV.W   #USB0_Char_Rx_Process, R12
   \   000004   ........     BRA     #subStringPos
    129          

   \                                 In  segment CODE, align 2
    130          void getIP(void) {
   \                     getIP:
    131              if(pb0_buffered) {
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   3124         JEQ     ??getIP_2
    132                  if(subStringPos((char*)USB0_Char_Rx_Process, IP_RESPONSE)) {
   \   000006   3D40....     MOV.W   #`?<Constant "+CIFSR:STAIP,">`, R13
   \   00000A   ........     CALLA   #?Subroutine0
   \                     ??CrossCallReturnLabel_2:
   \   00000E   5E42....     MOV.B   &dotFound, R14
   \   000012   1F42....     MOV.W   &midIndex, R15
   \   000016   0C93         CMP.W   #0x0, R12
   \   000018   1D24         JEQ     ??getIP_3
    133                      int i;
    134          
    135                      for(i = 0; i <= IP_LEN && USB0_Char_Rx_Process[i + IP_RESPONSE_LEN + 1] != '"'; ++i) {
   \   00001A   0D43         MOV.W   #0x0, R13
   \                     ??getIP_0:
   \   00001C   FD902200.... CMP.B   #0x22, LWRD(USB0_Char_Rx_Process + 14)(R13)
   \   000022   0F24         JEQ     ??getIP_4
    136                          IP[i] = USB0_Char_Rx_Process[i + IP_RESPONSE_LEN + 1];
   \   000024   5C4D....     MOV.B   LWRD(USB0_Char_Rx_Process + 14)(R13), R12
   \   000028   CD4C....     MOV.B   R12, IP(R13)
    137          
    138                          if(IP[i] == '.') {
   \   00002C   7C902E00     CMP.B   #0x2e, R12
   \   000030   0420         JNE     ??getIP_5
    139                              if(++dotFound == 2) midIndex = i;
   \   000032   5E53         ADD.B   #0x1, R14
   \   000034   6E93         CMP.B   #0x2, R14
   \   000036   0120         JNE     ??getIP_5
   \   000038   0F4D         MOV.W   R13, R15
    140                          }
    141                      }
   \                     ??getIP_5:
   \   00003A   1D53         ADD.W   #0x1, R13
   \   00003C   3D900E00     CMP.W   #0xe, R13
   \   000040   ED3B         JL      ??getIP_0
    142          
    143                      IP[i + IP_RESPONSE_LEN + 2] = 0;
   \                     ??getIP_4:
   \   000042   CD43....     MOV.B   #0x0, LWRD(IP + 15)(R13)
    144                      IP[IP_LEN] = 0;
   \   000046   C243....     MOV.B   #0x0, &IP + 13
    145                      IP[midIndex] = 0;
   \   00004A   CF43....     MOV.B   #0x0, IP(R15)
    146          
    147                      iot_setup_state = IOT_SETUP_FINISHED;
   \   00004E   7D404600     MOV.B   #0x46, R13
   \   000052   023C         JMP     ??getIP_1
    148                  } else iot_setup_state = GET_IP_Tx;
   \                     ??getIP_3:
   \   000054   7D404900     MOV.B   #0x49, R13
   \                     ??getIP_1:
   \   000058   824F....     MOV.W   R15, &midIndex
   \   00005C   C24E....     MOV.B   R14, &dotFound
   \   000060   C24D....     MOV.B   R13, &iot_setup_state
    149          
    150                  clearProcessBuff_0();
   \   000064   ........     CALLA   #clearProcessBuff_0
    151              }
    152          }
   \                     ??getIP_2:
   \   000068   1001         RETA
    153          

   \                                 In  segment CODE, align 2
    154          void displayNetworkInfo(void) {
   \                     displayNetworkInfo:
    155              centerStringToDisplay(0, SSID);
   \   000000   3D40....     MOV.W   #SSID, R13
   \   000004   0C43         MOV.W   #0x0, R12
   \   000006   ........     CALLA   #centerStringToDisplay
    156              displayIP(1);
   \   00000A   1C43         MOV.W   #0x1, R12
   \   00000C   ........     CALLA   #displayIP
    157              display_changed = 1;
   \   000010   D243....     MOV.B   #0x1, &display_changed
    158          }
   \   000014   1001         RETA
    159          

   \                                 In  segment CODE, align 2
    160          void displayIP(int pos) {
   \                     displayIP:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
    161              strcpy(display_line[pos], "          ");
   \   000004   0B4C         MOV.W   R12, R11
   \   000006                RPT     #0xa
   \   000006   49180B5C     ADDX.W  R12, R11
   \   00000A   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00000E   0C4B         MOV.W   R11, R12
   \   000010   3C50....     ADD.W   #display_line, R12
   \   000014   ........     CALLA   #strcpy
    162              strcpy(display_line[pos + 1], "          ");
   \   000018   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001C   3B50....     ADD.W   #display_line + 11, R11
   \   000020   0C4B         MOV.W   R11, R12
   \   000022   ........     CALLA   #strcpy
    163              centerStringToDisplay(pos, IP);
   \   000026   3D40....     MOV.W   #IP, R13
   \   00002A   0C4A         MOV.W   R10, R12
   \   00002C   ........     CALLA   #centerStringToDisplay
    164              centerStringToDisplay(pos + 1, IP + midIndex + 1);
   \   000030   3D40....     MOV.W   #IP + 1, R13
   \   000034   1D52....     ADD.W   &midIndex, R13
   \   000038   1A53         ADD.W   #0x1, R10
   \   00003A   0C4A         MOV.W   R10, R12
   \   00003C   ........     CALLA   #centerStringToDisplay
    165          }
   \   000040   1A17         POPM.W  #0x2, R11
   \   000042   1001         RETA
    166          
    167          

   \                                 In  segment CODE, align 2
    168          void IOTBufferCommands(void) {
   \                     IOTBufferCommands:
    169              if(pb0_buffered) {
   \   000000   8293....     CMP.W   #0x0, &pb0_buffered
   \   000004   0B24         JEQ     ??IOTBufferCommands_0
    170                  if(subStringPos((char*)USB0_Char_Rx_Process, DISCONNECTED_RESPONSE))
   \   000006   3D40....     MOV.W   #`?<Constant "DISCONNECT">`, R13
   \   00000A   ........     CALLA   #?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000E   0C93         CMP.W   #0x0, R12
   \   000010   0324         JEQ     ??IOTBufferCommands_1
    171                      iot_setup_state = CIPSERVER_Tx;
   \   000012   F2405300.... MOV.B   #0x53, &iot_setup_state
    172          
    173                  clearProcessBuff_0();
   \                     ??IOTBufferCommands_1:
   \   000018   ........     CALLA   #clearProcessBuff_0
    174              }
    175          
    176          }
   \                     ??IOTBufferCommands_0:
   \   00001C   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for iot_setup_state>`:
   \   000000   42           DC8 66

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPMUX=1\015\012"
   \            4D55583D310D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIPSERVER=1,4764\\r\\n">`:
   \   000000   41542B434950 DC8 "AT+CIPSERVER=1,4764\015\012"
   \            534552564552
   \            3D312C343736
   \            340D0A00    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CWJAP?\\r\\n">`:
   \   000000   41542B43574A DC8 "AT+CWJAP?\015\012"
   \            41503F0D0A00

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+CIFSR\\r\\n">`:
   \   000000   41542B434946 DC8 "AT+CIFSR\015\012"
   \            53520D0A00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+PING=\\"www.google.c...">`:
   \   000000   41542B50494E DC8 "AT+PING=\"www.google.com\"\015\012"
   \            473D22777777
   \            2E676F6F676C
   \            652E636F6D22
   \            0D0A00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "WIFI GOT IP\\r\\n">`:
   \   000000   574946492047 DC8 "WIFI GOT IP\015\012"
   \            4F542049500D
   \            0A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "+CWJAP:">`:
   \   000000   2B43574A4150 DC8 "+CWJAP:"
   \            3A00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "+CIFSR:STAIP,">`:
   \   000000   2B4349465352 DC8 "+CIFSR:STAIP,"
   \            3A5354414950
   \            2C00        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "DISCONNECT">`:
   \   000000   444953434F4E DC8 "DISCONNECT"
   \            4E45435400  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   IOTBufferCommands
        4   -> clearProcessBuff_0
        4   -> subStringPos
      4   Init_IOT
        4   -> SendIOTCommand
        4   -> clearProcessBuff_0
        4   -> displayNetworkInfo
        4   -> getIP
        4   -> getSSID
        4   -> waitForReady
      6   SendIOTCommand
        6   -> USCI_A0_transmit
        6   -> strcpy
      8   displayIP
        8   -> centerStringToDisplay
        8   -> strcpy
      4   displayNetworkInfo
        4   -> centerStringToDisplay
        4   -> displayIP
      4   getIP
        4   -> clearProcessBuff_0
        4   -> subStringPos
      4   getSSID
        4   -> clearProcessBuff_0
        4   -> subStringPos
      4   waitForReady
        4   -> clearProcessBuff_0
        4   -> strcmp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      14  ?<Constant "+CIFSR:STAIP,">
       8  ?<Constant "+CWJAP:">
      11  ?<Constant "AT+CIFSR\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      22  ?<Constant "AT+CIPSERVER=1,4764\r\n">
      12  ?<Constant "AT+CWJAP?\r\n">
      27  ?<Constant "AT+PING=\"www.google.c...">
      11  ?<Constant "DISCONNECT">
      14  ?<Constant "WIFI GOT IP\r\n">
       1  ?<Initializer for iot_setup_state>
       8  ?Subroutine0
      30  IOTBufferCommands
      14  IP
     200  Init_IOT
      11  SSID
      26  SendIOTCommand
       2  _A_UCA0IE_L
      68  displayIP
      22  displayNetworkInfo
       1  dotFound
     106  getIP
      70  getSSID
       1  iot_setup_state
       2  midIndex
      34  waitForReady

 
 564 bytes in segment CODE
   2 bytes in segment DATA16_AN
 144 bytes in segment DATA16_C
   1 byte  in segment DATA16_I
   1 byte  in segment DATA16_ID
  28 bytes in segment DATA16_Z
 
 564 bytes of CODE  memory
 145 bytes of CONST memory
  29 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
