###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          18/Aug/2022  11:47:04
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\main.c
#    Command line  =  
#        -f C:\Users\IBRAHI~1\AppData\Local\Temp\EWE3D9.tmp ("C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\main.c" -lC
#        "C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\List" -o
#        "C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Ibrahim Moghul\OneDrive\Documents\Programming\Drone\Code\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2022
      8          //  Built with IAR Embedded Workbench Version: (7.21.1)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          #include "macros.h"
     16          #include "init.h"
     17          #include "led.h"
     18          #include "wheels.h"
     19          #include "ports.h"
     20          #include "switches.h"
     21          #include "timers.h"
     22          #include "adc.h"
     23          #include "sm.h"
     24          #include "serial.h"
     25          #include "iot.h"
     26          // Function Prototypes
     27          void main(void);
     28          
     29          
     30          // Global Variables
     31          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     33          extern char display_line[4][11];
     34          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     36          extern volatile unsigned char display_changed;
     37          extern volatile unsigned char update_display;
     38          extern volatile unsigned int update_display_count;
     39          extern volatile char one_time;
     40          //===========================================================================
     41          // Function name: Main
     42          //
     43          // Description: This function contains the while loop that runs continuously
     44          // to act for the operating system. It also calls all the functions to
     45          // initialize the system.
     46          //
     47          // Passed : no variables passed
     48          // Locals: no variables declared
     49          // Returned: no values returned
     50          // Globals: char* display_1
     51          // char* display_2
     52          // slow_input_down
     53          // control_state[CNTL_STATE_INDEX]
     54          //
     55          // Author: Ibrahim Moghul
     56          // Date: Feb 2022
     57          // Compiler: Built with IAR Embedded Workbench Version: (7.21.1)
     58          //===========================================================================
     59          

   \                                 In  segment CODE, align 2
     60          void main(void) {
   \                     main:
     61              //------------------------------------------------------------------------------
     62              // Main Program
     63              // This is the main routine for the program. Execution of code starts here.
     64              // The operating system is Back Ground Fore Ground.
     65              //
     66              //------------------------------------------------------------------------------
     67              PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     68              // Disable the GPIO power-on default high-impedance mode to activate
     69              // previously configured port settings
     70              Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     71              Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     72              Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     73              Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     74              Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     75              // Init_REF();
     76              // Init_DAC();
     77              // Init_ADC();
     78              Init_Serial_UCA();
   \   000018   ........     CALLA   #Init_Serial_UCA
     79              // Place the contents of what you want on the display, in between the quotes
     80              // Limited to 10 characters per line
     81              strcpy(display_line[0], "          ");
   \   00001C   3A40....     MOV.W   #`?<Constant "          ">`, R10
   \   000020   0D4A         MOV.W   R10, R13
   \   000022   3C40....     MOV.W   #display_line, R12
   \   000026   ........     CALLA   #strcpy
     82              strcpy(display_line[1], "          ");
   \   00002A   0D4A         MOV.W   R10, R13
   \   00002C   3C40....     MOV.W   #display_line + 11, R12
   \   000030   ........     CALLA   #strcpy
     83              strcpy(display_line[2], "          ");
   \   000034   0D4A         MOV.W   R10, R13
   \   000036   3C40....     MOV.W   #display_line + 22, R12
   \   00003A   ........     CALLA   #strcpy
     84              strcpy(display_line[3], "          ");
   \   00003E   0D4A         MOV.W   R10, R13
   \   000040   3C40....     MOV.W   #display_line + 33, R12
   \   000044   ........     CALLA   #strcpy
     85              display_changed = TRUE;
   \   000048   D243....     MOV.B   #0x1, &display_changed
     86              update_display = TRUE;
   \   00004C   D243....     MOV.B   #0x1, &update_display
     87              Display_Process();
   \   000050   ........     CALLA   #Display_Process
     88          
     89              //------------------------------------------------------------------------------
     90              // Begining of the "While" Operating System
     91              //------------------------------------------------------------------------------
     92              while(ALWAYS) {                       // Can the Operating system run
     93                  SerialProcess();
   \                     ??main_0:
   \   000054   ........     CALLA   #SerialProcess
     94                  
     95                  if(!Init_IOT()) continue;
   \   000058   ........     CALLA   #Init_IOT
   \   00005C   0C93         CMP.W   #0x0, R12
   \   00005E   FA27         JEQ     ??main_0
     96          
     97                  IOTBufferCommands();
   \   000060   ........     CALLA   #IOTBufferCommands
     98                  
     99                  Display_Process();
   \   000064   ........     CALLA   #Display_Process
    100                  P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
   \   000068   D2E32202     XOR.B   #0x1, &0x222
   \   00006C   F33F         JMP     ??main_0
   \   00006E   0343         NOP
   \   000070                REQUIRE _A_PM5CTL0_L
   \   000070                REQUIRE _A_PBOUT_L
    101              }
    102          
    103              //------------------------------------------------------------------------------
    104          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    105          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> IOTBufferCommands
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_IOT
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Serial_UCA
        4   -> Init_Timers
        4   -> SerialProcess
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  _A_PBOUT_L
       2  _A_PM5CTL0_L
       1  display_mode
     112  main
       1  slow_input_down

 
 112 bytes in segment CODE
   4 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
   2 bytes in segment DATA16_Z
 
 112 bytes of CODE  memory
  11 bytes of CONST memory
   2 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
