###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          18/Aug/2022  11:38:50
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\adc.c
#    Command line  =  
#        -f C:\Users\IBRAHI~1\AppData\Local\Temp\EW5B5F.tmp ("C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\adc.c" -lC
#        "C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\List" -o
#        "C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\Obj" --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -Ohz --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\List\adc.lst
#    Object file   =  
#        C:\Users\Ibrahim
#        Moghul\OneDrive\Documents\Programming\Drone\Code\Debug\Obj\adc.r43
#
###############################################################################

C:\Users\Ibrahim Moghul\OneDrive\Documents\Programming\Drone\Code\adc.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADCCTL1_L
   \                     _A_ADCCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADCCTL2_L
   \                     _A_ADCCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADCIE_L
   \                     _A_ADCIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x120
   \   union <unnamed> _A_PMMCTL0_L
   \                     _A_PMMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x124
   \   union <unnamed> _A_PMMCTL2_L
   \                     _A_PMMCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb0
   \   union <unnamed> _A_SAC3OA_L
   \                     _A_SAC3OA_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb2
   \   union <unnamed> _A_SAC3PGA_L
   \                     _A_SAC3PGA_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb4
   \   union <unnamed> _A_SAC3DAC_L
   \                     _A_SAC3DAC_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0xcb6
   \   union <unnamed> _A_SAC3DAT_L
   \                     _A_SAC3DAT_L:
   \   000000                DS8 2
      2          #include "ports.h"
      3          #include "adc.h"
      4          #include "macros.h"
      5          #include "wheels.h"
      6          #include "functions.h"
      7          #include "sm.h"
      8          #include <string.h>
      9          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned int ADC_Channel;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int ADC_Left_Detect, ADC_Right_Detect, ADC_Thumb, ADC_Vbat, ADC_Vdac, ADC_V3v3;
   \                     ADC_Left_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Right_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Vbat:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_Vdac:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADC_V3v3:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile unsigned int DAC_data;
   \                     DAC_data:
   \   000000                DS8 2
     13          extern char display_line[4][11];
     14          extern volatile unsigned char display_changed;
     15          extern volatile unsigned int checkAdc;
     16          extern volatile char state;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int adcUpdated;
   \                     adcUpdated:
   \   000000                DS8 2
     18          

   \                                 In  segment CODE, align 2
     19          void Init_ADC(void) {
   \                     Init_ADC:
     20              //------------------------------------------------------------------------------
     21              //------------------------------------------------------------------------------
     22              // ADCCTL0 Register
     23              ADCCTL0 = 0;
   \   000000   82430007     MOV.W   #0x0, &0x700
     24              ADCCTL0 |= ADCSHT_2;
   \   000004   B2D000020007 BIS.W   #0x200, &0x700
     25              ADCCTL0 |= ADCMSC;
   \   00000A   B2D080000007 BIS.W   #0x80, &0x700
     26              ADCCTL0 |= ADCON;
   \   000010   B2D010000007 BIS.W   #0x10, &0x700
     27              // ADCCTL1 Register
     28              ADCCTL1 = 0;
   \   000016   82430207     MOV.W   #0x0, &0x702
     29              ADCCTL1 |= ADCSHS_0;
   \   00001A   3F400207     MOV.W   #0x702, R15
   \   00001E   A24F0207     MOV.W   @R15, &0x702
     30              ADCCTL1 |= ADCSHP;
   \   000022   B2D000020207 BIS.W   #0x200, &0x702
     31              ADCCTL1 &= ~ADCISSH;
   \   000028   B2C000010207 BIC.W   #0x100, &0x702
     32              ADCCTL1 |= ADCDIV_0;
   \   00002E   A24F0207     MOV.W   @R15, &0x702
     33              ADCCTL1 |= ADCSSEL_0;
   \   000032   A24F0207     MOV.W   @R15, &0x702
     34              ADCCTL1 |= ADCCONSEQ_0;
   \   000036   A24F0207     MOV.W   @R15, &0x702
     35              // ADCCTL2 Register
     36              ADCCTL2 = 0;
   \   00003A   82430407     MOV.W   #0x0, &0x704
     37              ADCCTL2 |= ADCPDIV0;
   \   00003E   B2D000010407 BIS.W   #0x100, &0x704
     38              ADCCTL2 |= ADCRES_1;
   \   000044   B2D010000407 BIS.W   #0x10, &0x704
     39              ADCCTL2 &= ~ADCDF;
   \   00004A   B2C20407     BIC.W   #0x8, &0x704
     40              ADCCTL2 &= ~ADCSR;
   \   00004E   A2C20407     BIC.W   #0x4, &0x704
     41              // ADCMCTL0 Register
     42              ADCMCTL0 |= ADCSREF_0;
   \   000052   92420A070A07 MOV.W   &0x70a, &0x70a
     43              ADCMCTL0 |= ADCINCH_5;
   \   000058   B2D005000A07 BIS.W   #0x5, &0x70a
     44          
     45              ADCIE |= ADCIE0;
   \   00005E   92D31A07     BIS.W   #0x1, &0x71a
     46              ADCCTL0 |= ADCENC;
   \   000062   A2D30007     BIS.W   #0x2, &0x700
     47              ADCCTL0 |= ADCSC;
   \   000066   92D30007     BIS.W   #0x1, &0x700
     48          }
   \   00006A   1001         RETA
   \   00006C                REQUIRE _A_ADCCTL0_L
   \   00006C                REQUIRE _A_ADCCTL1_L
   \   00006C                REQUIRE _A_ADCCTL2_L
   \   00006C                REQUIRE _A_ADCMCTL0_L
   \   00006C                REQUIRE _A_ADCIE_L
     49          

   \                                 In  segment CODE, align 2
     50          void Init_REF(void) {
   \                     Init_REF:
     51              PMMCTL0_H = PMMPW_H;
   \   000000   F240A5002101 MOV.B   #0xa5, &0x121
     52              PMMCTL2 = INTREFEN;
   \   000006   92432401     MOV.W   #0x1, &0x124
     53              PMMCTL2 |= REFVSEL_2;
   \   00000A   B2D020002401 BIS.W   #0x20, &0x124
     54          
     55              while(!(PMMCTL2 & REFGENRDY));
   \                     ??Init_REF_0:
   \   000010   B2B000102401 BIT.W   #0x1000, &0x124
   \   000016   FC27         JEQ     ??Init_REF_0
     56          }
   \   000018   1001         RETA
   \   00001A                REQUIRE _A_PMMCTL0_L
   \   00001A                REQUIRE _A_PMMCTL2_L
     57          

   \                                 In  segment CODE, align 2
     58          void Init_DAC(void) {
   \                     Init_DAC:
     59              DAC_data = 1000;
   \   000000   B240E803.... MOV.W   #0x3e8, &DAC_data
     60              SAC3DAT = DAC_data;
   \   000006   9242....B60C MOV.W   &DAC_data, &0xcb6
     61              SAC3DAC = DACSREF_1;
   \   00000C   B2400010B40C MOV.W   #0x1000, &0xcb4
     62              SAC3DAC |= DACLSEL_0;
   \   000012   9242B40CB40C MOV.W   &0xcb4, &0xcb4
     63              SAC3DAC |= DACEN;
   \   000018   92D3B40C     BIS.W   #0x1, &0xcb4
     64          
     65              SAC3OA = NMUXEN;
   \   00001C   B2408000B00C MOV.W   #0x80, &0xcb0
     66              SAC3OA |= PMUXEN;
   \   000022   B2D2B00C     BIS.W   #0x8, &0xcb0
     67              SAC3OA |= PSEL_1;
   \   000026   92D3B00C     BIS.W   #0x1, &0xcb0
     68              SAC3OA |= NSEL_1;
   \   00002A   B2D01000B00C BIS.W   #0x10, &0xcb0
     69              SAC3OA |= OAPM;
   \   000030   B2D00002B00C BIS.W   #0x200, &0xcb0
     70          
     71              SAC3PGA = MSEL_1;
   \   000036   9243B20C     MOV.W   #0x1, &0xcb2
     72          
     73              SAC3OA |= SACEN;
   \   00003A   B2D00004B00C BIS.W   #0x400, &0xcb0
     74              SAC3OA |= OAEN;
   \   000040   B2D00001B00C BIS.W   #0x100, &0xcb0
     75          }
   \   000046   1001         RETA
   \   000048                REQUIRE _A_SAC3DAT_L
   \   000048                REQUIRE _A_SAC3DAC_L
   \   000048                REQUIRE _A_SAC3OA_L
   \   000048                REQUIRE _A_SAC3PGA_L
     76          
     77          // #pragma vector=ADC_VECTOR
     78          // __interrupt void ADC_ISR(void) {
     79          //     switch(__even_in_range(ADCIV, ADCIV_ADCIFG)) {
     80          //         case ADCIV_NONE:
     81          //             break;
     82          
     83          //         case ADCIV_ADCOVIFG:
     84          //             break;
     85          
     86          //         case ADCIV_ADCTOVIFG:
     87          //             break;
     88          
     89          //         case ADCIV_ADCHIIFG:
     90          //             break;
     91          
     92          //         case ADCIV_ADCLOIFG:
     93          //             break;
     94          
     95          //         case ADCIV_ADCINIFG:
     96          //             break;
     97          
     98          //         case ADCIV_ADCIFG:
     99          //             ADCCTL0 &= ~ADCENC;
    100          
    101          //             switch (ADC_Channel++) {
    102          //                 case 0x00:
    103          //                     adcUpdated = 1;
    104          //                     ADC_Channel = 0;
    105          //                     break;
    106          
    107          //                 default:
    108          //                     break;
    109          //             }
    110          
    111          //             ADCCTL0 |= ADCENC;
    112          
    113          //         default:
    114          //             break;
    115          //     }
    116          // }
    117          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_ADC
      4   Init_DAC
      4   Init_REF


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ADC_Channel
       2  ADC_Left_Detect
       2  ADC_Right_Detect
       2  ADC_Thumb
       2  ADC_V3v3
       2  ADC_Vbat
       2  ADC_Vdac
       2  DAC_data
     108  Init_ADC
      72  Init_DAC
      26  Init_REF
       2  _A_ADCCTL0_L
       2  _A_ADCCTL1_L
       2  _A_ADCCTL2_L
       2  _A_ADCIE_L
       2  _A_ADCMCTL0_L
       2  _A_PMMCTL0_L
       2  _A_PMMCTL2_L
       2  _A_SAC3DAC_L
       2  _A_SAC3DAT_L
       2  _A_SAC3OA_L
       2  _A_SAC3PGA_L
       2  adcUpdated

 
 206 bytes in segment CODE
  22 bytes in segment DATA16_AN
  18 bytes in segment DATA16_Z
 
 206 bytes of CODE memory
  18 bytes of DATA memory (+ 22 bytes shared)

Errors: none
Warnings: none
